#!/bin/bash

# PROMPT_COMMAND defines function to be called at every command prompt
# PS1 will look something like this:
#
# Time_and_date username:directory !history_number status_code:
#    (git_branch) [git_most_recent_commit]
# $
#
# Example
#
# 2017-01-28 12:57:07 sebastian:~/profiles !1035 1:
#   (ubuntu1604) [c6de134 Added gpg -> gpg2 alias]
# $
#
# If the status-code is zero, it's not displayed
# If the current working directory is not in a git repository, the whole second line is omitted

PROMPT_COMMAND=__prompt_command

__prompt_command() {
	local exitStatus=$?

	PS1=''

	local RCol='\[\e[0m\]'

	local nRed='\[\e[0;31m\]'
	local lPurple='\[\e[1;95m\]'
	local lBlue='\[\e[1;34m\]'
	local dBlue='\[\e[0;34m\]'
	local dGray='\[\e[0;90m\]'
	local nGreen='\[\e[0;32m\]'
	local lGreen='\[\e[1;32m\]'
	local dGreen='\[\e[2;32m\]'

	# Date and time
	PS1+="${lPurple}\D{%Y-%m-%d %T}${RCol} "
	
	# User and directory
	PS1+="\u:\w "

	# Exit code, if not zero
	if [ $exitStatus -ne 0 ]; then
			PS1+=" ${nRed}${exitStatus}${RCol}"
	fi

	# If in git repository: New line and git branch
	PS1+="${lBlue}$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \\(.*\\)/$(echo -e "\n")  (\\1)/g")${RCol}"

	# If in git repository: Last commit
	PS1+="${dGray}$(git --no-pager log --oneline -n1 2> /dev/null | sed -e 's/\(.*\)/ [\1]/')${RCol}"

	# new line
	PS1+="\n"

	# History number of next command
	PS1+="${dGray}!\!${RCol}"
	
	# Colon
	PS1+=": "
	
	# Dollar
	PS1+="${dGreen}Â£${RCol} "
}

# Multiline commands
export PS2="       ${dGreen}>${rCol} "
